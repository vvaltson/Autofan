blueprint:
  name: Auto Fan Speed - Humidity Based
  description: "Humidity-based Auto fan control. Adjusts fan speed relative to ambient humidity levels, with delay and minimum change thresholds."
  domain: automation
  input:
    humidity_sensor:
      name: 💧 Humidity Sensor
      description: Enter your humidity sensor.
      default: []
      selector:
        entity:
          domain:
          - sensor
          device_class:
          - humidity
          multiple: false
    fan_switch:
      name: 💨 Fan
      description: The fan you wish to speed control.
      selector:
        entity:
          domain:
          - fan
          multiple: false
    min_fan_speed:
      name: 💨 Minimum Fan Speed
      description: Set the minimum percentage speed when your fan is still on.
      default: 16
      selector:
        number:
          min: 1.0
          max: 100.0
          mode: slider
          step: 1.0
          unit_of_measurement: '%'
    max_fan_speed:
      name: 💨 Maximum Fan Speed
      description: Set the maximum percentage speed for your fan.
      default: 100
      selector:
        number:
          min: 1.0
          max: 100.0
          mode: slider
          step: 1.0
          unit_of_measurement: '%'
    max_humidity:
      name: 📈 Maximum Humidity
      description: The humidity level at which the fan runs at maximum speed.
      default: 70
      selector:
        number:
          min: 10.0
          max: 100.0
          step: 1.0
          mode: slider
    min_humidity:
      name: 📉 Minimum Humidity
      description: The humidity level at which the fan runs at minimum speed.
      default: 30
      selector:
        number:
          min: 10.0
          max: 100.0
          step: 1.0
          mode: slider
    off_humidity:
      name: 🛑 Humidity level to switch off
      description: Humidity level at which the fan turns off, and turns back on when above.
      default: 25
      selector:
        number:
          min: 10.0
          max: 100.0
          step: 1.0
          mode: slider
    auto_turn_on_enabled:
      name: ✅ Enable auto fan on 
      description: Let the fan automatically turn back on if the humidity rises above the off level.
      default: true
      selector:
        boolean: {}
    change_time:
      name: ⏱️ Change frequency delay
      description: Delay time between speed adjustments.
      default: 30
      selector:
        number:
          min: 1.0
          max: 120.0
          unit_of_measurement: minutes
          step: 1.0
          mode: slider
    change_threshold:
      name: Minimum percentage change
      description: Minimum change (between current fan speed and set fan speed).
      default: 1
      selector:
        number:
          min: 1.0
          max: 100.0
          mode: slider
          step: 1.0
          unit_of_measurement: '%'
    max_change:
      name: Maximum percentage change
      description: Maximum change (between current fan speed and set fan speed).
      default: 50
      selector:
        number:
          min: 1.0
          max: 100.0
          mode: slider
          step: 1.0
          unit_of_measurement: '%'
    blocker_entity:
      name: (OPTIONAL) Blocking entity
      description: If this entity's state is on, it will prevent the automation from running. E.g. sleepmode or away mode.
      default:
      selector:
        entity:
          multiple: false

  variables:
    humidity_sensor: !input humidity_sensor
    fan_switch: !input fan_switch
    auto_turn_on_enabled: !input 'auto_turn_on_enabled'

    min_fan_speed: !input min_fan_speed
    max_fan_speed: !input max_fan_speed

    max_humidity: !input max_humidity 
    min_humidity: !input min_humidity
    off_humidity: !input off_humidity

    change_time: !input change_time
    max_change: !input max_change
    change_threshold: !input change_threshold
    blocker_entity: !input blocker_entity
    current_humidity: "{{ states(humidity_sensor) | float(0)}}"
    fan_speed: '{{ state_attr(fan_switch,''percentage'') | float(0)}}'
    humidity_range: '{{ max_humidity | float(0) - min_humidity | float(0) }}'
    fan_range: '{{ max_fan_speed | float(0) - min_fan_speed | float(0) }}'
    slope: '{{ fan_range | float(0) / humidity_range | float(0) }}'
    initial_set_fan_speed: '{{ [[slope | float(0) * (current_humidity | float(0) - min_humidity | float(0)) + min_fan_speed | float(0),  min_fan_speed] | max, max_fan_speed] | min}}'
    adjusted_set_fan_speed: >
      {% set diff = initial_set_fan_speed - fan_speed %}
      {% if diff > max_change | float(0) %}
        {{ fan_speed + max_change | float(0) }}
      {% elif diff < -max_change | float(0) %}
        {{ fan_speed - max_change | float(0) }}
      {% else %}
        {{ initial_set_fan_speed }}
      {% endif %}
    set_fan_speed: '{{ adjusted_set_fan_speed }}'
    speed_diff: '{{ (fan_speed - set_fan_speed) | abs }}'
trigger:
  - platform: state
    entity_id:
    - !input fan_switch
    id: fanon
    from: 'off'
    to: 'on'
  - platform: state
    id: humidity_state_change
    entity_id:
    - !input humidity_sensor
condition:
  - condition: template
    alias: Check for blocker entity
    value_template: '{{ (blocker_entity == none) or (states(blocker_entity) == ''off'') }}'
action:
  - choose:
    - conditions:
      - condition: trigger
        alias: Only run if fan was switched on 
        id: fanon
      - condition: template
        alias: Is the percentage change great enough? 
        value_template: '{{ speed_diff | float(0) > change_threshold | float(0) }}'
      sequence:
      - service: homeassistant.turn_on
        data:
          percentage: '{{ set_fan_speed }}'
        target:
          entity_id: '{{ fan_switch }}'
      - delay:
          minutes: !input change_time
    - conditions:
      - condition: template
        value_template: '{{ states(fan_switch) == ''on'' }}'
        alias: Make sure the fan is already on (ignore if it's been switched off)
      - condition: template
        alias: Is the percentage change great enough? 
        value_template: '{{ speed_diff | float(0) > change_threshold | float(0) }}'
      - condition: template
        alias: Is the humidity above the off humidity? 
        value_template: '{{ current_humidity | float(0) > off_humidity | float(0) }}'
      sequence:
      - service: homeassistant.turn_on
        target:
          entity_id: '{{ fan_switch }}'
        data:
          percentage: '{{ set_fan_speed }}'
      - delay:
          minutes: !input change_time
    - conditions:
      - condition: not
        alias: Make sure the fan hasn't just been turned on 
        conditions:
        - condition: trigger
          id: fanon
      - condition: numeric_state
        entity_id: !input humidity_sensor
        below: !input off_humidity
      sequence:
      - service: homeassistant.turn_off
        target:
          entity_id: '{{ fan_switch }}'
    - conditions:
      - '{{ auto_turn_on_enabled }}'
      - condition: template
        value_template: '{{ states(fan_switch) == ''off'' }}'
        alias: Is the fan currently off?  
      - condition: template
        alias: Is the humidity above the off humidity? 
        value_template: '{{ current_humidity | float(0) > off_humidity | float(0) }}'
      sequence:
      - service: homeassistant.turn_on
        data:
          percentage: '{{ set_fan_speed }}'
        target:
          entity_id: '{{ fan_switch }}'
      - delay:
          minutes: !input change_time
mode: single
