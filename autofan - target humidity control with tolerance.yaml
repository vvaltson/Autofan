blueprint:
  name: Auto Fan Speed - Target Humidity Control with Tolerance
  description: "Automatically adjusts fan speed to maintain humidity around a target level, with a tolerance range."
  domain: automation
  input:
    humidity_sensor:
      name: 💧 Humidity Sensor
      description: Enter your humidity sensor.
      default: []
      selector:
        entity:
          domain:
          - sensor
          device_class:
          - humidity
          multiple: false
    fan_switch:
      name: 💨 Fan
      description: The fan you wish to speed control.
      selector:
        entity:
          domain:
          - fan
          multiple: false
    target_humidity:
      name: 🎯 Target Humidity Level
      description: Desired humidity level to maintain.
      default: 60
      selector:
        number:
          min: 10.0
          max: 100.0
          step: 1.0
          mode: slider
    tolerance:
      name: ⚖️ Tolerance Around Target
      description: Humidity tolerance range (±) around the target where no adjustment occurs.
      default: 1
      selector:
        number:
          min: 1.0
          max: 20.0
          step: 0.5
          mode: slider
    min_fan_speed:
      name: 💨 Minimum Fan Speed
      description: Set the minimum percentage speed for the fan.
      default: 1
      selector:
        number:
          min: 1.0
          max: 100.0
          mode: slider
          step: 1.0
          unit_of_measurement: '%'
    max_fan_speed:
      name: 💨 Maximum Fan Speed
      description: Set the maximum percentage speed for the fan.
      default: 100
      selector:
        number:
          min: 1.0
          max: 100.0
          mode: slider
          step: 1.0
          unit_of_measurement: '%'
    off_humidity:
      name: 🛑 Off Humidity Level
      description: Humidity level below which the fan turns off.
      default: 35
      selector:
        number:
          min: 10.0
          max: 100.0
          step: 1.0
          mode: slider
    auto_turn_on_enabled:
      name: ✅ Enable auto fan on
      description: Automatically turn the fan back on if humidity rises above the off level.
      default: true
      selector:
        boolean: {}
    change_time:
      name: ⏱️ Change Frequency Delay
      description: Delay time between speed adjustments.
      default: 1
      selector:
        number:
          min: 1.0
          max: 120.0
          unit_of_measurement: minutes
          step: 1.0
          mode: slider
    change_threshold:
      name: Minimum Percentage Change
      description: Minimum change (between current fan speed and set fan speed).
      default: 1
      selector:
        number:
          min: 1.0
          max: 100.0
          mode: slider
          step: 1.0
          unit_of_measurement: '%'
    max_change:
      name: Maximum Percentage Change
      description: Maximum change (between current fan speed and set fan speed).
      default: 50
      selector:
        number:
          min: 1.0
          max: 100.0
          mode: slider
          step: 1.0
          unit_of_measurement: '%'
    blocker_entity:
      name: (OPTIONAL) Blocking entity
      description: Prevents the automation from running if this entity's state is on.
      default:
      selector:
        entity:
          multiple: false

variables:
  humidity_sensor: !input humidity_sensor
  fan_switch: !input fan_switch
  auto_turn_on_enabled: !input auto_turn_on_enabled
  target_humidity: !input target_humidity
  tolerance: !input tolerance
  min_fan_speed: !input min_fan_speed
  max_fan_speed: !input max_fan_speed
  off_humidity: !input off_humidity
  change_time: !input change_time
  max_change: !input max_change
  change_threshold: !input change_threshold
  blocker_entity: !input blocker_entity

  current_humidity: "{{ states(humidity_sensor) | float(0) }}"
  fan_speed: "{{ state_attr(fan_switch, 'percentage') | float(0) }}"

  # Check if humidity is outside the target ± tolerance range
  deviation: "{{ current_humidity - target_humidity }}"
  outside_tolerance: "{{ deviation | abs > tolerance }}"

  # Fan speed adjustment to bring humidity closer to the target when outside tolerance
  initial_set_fan_speed: >
    {{ [
        min_fan_speed + ((deviation / (100 - target_humidity)) * (max_fan_speed - min_fan_speed)), 
        min_fan_speed
      ] | max | min(max_fan_speed) }}
  
  adjusted_set_fan_speed: >
    {% set diff = initial_set_fan_speed - fan_speed %}
    {% if diff > max_change | float(0) %}
      {{ fan_speed + max_change | float(0) }}
    {% elif diff < -max_change | float(0) %}
      {{ fan_speed - max_change | float(0) }}
    {% else %}
      {{ initial_set_fan_speed }}
    {% endif %}
  
  set_fan_speed: "{{ adjusted_set_fan_speed }}"
  speed_diff: "{{ (fan_speed - set_fan_speed) | abs }}"

trigger:
  - platform: state
    entity_id:
    - !input fan_switch
    id: fanon
    from: 'off'
    to: 'on'
  - platform: state
    id: humidity_state_change
    entity_id:
    - !input humidity_sensor

condition:
  - condition: template
    alias: Check for blocker entity
    value_template: "{{ (blocker_entity == none) or (states(blocker_entity) == 'off') }}"

  # Only adjust if outside tolerance range
  - condition: template
    alias: Check if outside tolerance
    value_template: "{{ outside_tolerance }}"

action:
  - choose:
    - conditions:
      - condition: trigger
        alias: Only run if fan was switched on
        id: fanon
      - condition: template
        alias: Is the percentage change great enough?
        value_template: "{{ speed_diff | float(0) > change_threshold | float(0) }}"
      sequence:
      - service: homeassistant.turn_on
        data:
          percentage: "{{ set_fan_speed }}"
        target:
          entity_id: "{{ fan_switch }}"
      - delay:
          minutes: !input change_time
    - conditions:
      - condition: template
        value_template: "{{ states(fan_switch) == 'on' }}"
        alias: Ensure fan is on before adjusting
      - condition: template
        alias: Is the percentage change great enough?
        value_template: "{{ speed_diff | float(0) > change_threshold | float(0) }}"
      - condition: template
        alias: Is the humidity above the off humidity?
        value_template: "{{ current_humidity > off_humidity }}"
      sequence:
      - service: homeassistant.turn_on
        target:
          entity_id: "{{ fan_switch }}"
        data:
          percentage: "{{ set_fan_speed }}"
      - delay:
          minutes: !input change_time
    - conditions:
      - condition: not
        alias: Prevent turning fan back on if humidity is below off level
        conditions:
        - condition: trigger
          id: fanon
      - condition: numeric_state
        entity_id: !input humidity_sensor
        below: !input off_humidity
      sequence:
      - service: homeassistant.turn_off
        target:
          entity_id: "{{ fan_switch }}"
    - conditions:
      - "{{ auto_turn_on_enabled }}"
      - condition: template
        value_template: "{{ states(fan_switch) == 'off' }}"
        alias: Fan is off
      - condition: template
        alias: Humidity above the off threshold
        value_template: "{{ current_humidity > off_humidity }}"
      sequence:
      - service: homeassistant.turn_on
        data:
          percentage: "{{ set_fan_speed }}"
        target:
          entity_id: "{{ fan_switch }}"
      - delay:
          minutes: !input change_time

mode: single
trace:
  stored_traces: 50
